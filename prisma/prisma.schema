
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Candidate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  image     String
  hint      String
  color     String
  totalBets Decimal  @default(0)
  status    String   @default("Active") // e.g., 'Active', 'Withdrawn'
  bets      Bet[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  joined        DateTime  @default(now())
  status        String    @default("Active") // 'Active', 'Suspended'
  balance       Decimal   @default(0)
  notifyOnBetStatusUpdates Boolean @default(true)
  
  accounts      Account[]
  sessions      Session[]
  bets          Bet[]
  transactions  Transaction[]
}

model Bet {
  id            String    @id @default(cuid())
  userId        String
  candidateId   Int
  candidateName String
  amount        Decimal
  placedDate    DateTime  @default(now())
  status        String    @default("Pending") // 'Pending', 'Won', 'Lost'

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Transaction {
  id     String   @id @default(cuid())
  userId String
  type   String // 'Deposit' or 'Withdrawal'
  amount Decimal
  fee    Decimal
  date   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id      String   @id @default(cuid())
  user    Json     // Store user details like name/email
  subject String
  message String
  date    DateTime @default(now())
  status  String   @default("Open") // 'Open', 'Closed'
}

model AdminSettings {
  id                   Int     @id @default(1)
  enable2fa            Boolean @default(false)
  notifyOnNewUser      Boolean @default(true)
  notifyOnLargeBet     Boolean @default(false)
  notifyOnLargeDeposit Boolean @default(true)
}

// NextAuth Required Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
