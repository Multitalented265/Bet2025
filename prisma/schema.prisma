generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                       String        @id @default(cuid())
  name                     String?
  email                    String?       @unique
  emailVerified            DateTime?
  password                 String?
  status                   String        @default("Active")
  balance                  Decimal       @default(0.00) @db.Decimal(10, 2)
  joined                   DateTime      @default(now())
  notifyOnBetStatusUpdates Boolean       @default(true)
  image                    String?
  resetToken               String?
  resetTokenExpiry         DateTime?
  accounts                 Account[]
  bets                     Bet[]
  sessions                 Session[]
  transactions             Transaction[]
}

model Candidate {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  image     String  @db.Text
  totalBets Decimal @default(0.00) @db.Decimal(12, 2)
  status    String  @default("Active")
  hint      String
  color     String
  bets      Bet[]
}

model Bet {
  id            String    @id @default(cuid())
  userId        String
  candidateName String
  amount        Decimal   @db.Decimal(10, 2)
  placedDate    DateTime  @default(now())
  status        String    @default("Pending")
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id     String   @id @default(cuid())
  type   String
  amount Decimal  @db.Decimal(10, 2)
  fee    Decimal  @db.Decimal(10, 2)
  date   DateTime @default(now())
  userId String
  txRef  String?
  status String   @default("pending")
  user   User     @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id      String   @id @default(cuid())
  user    Json
  subject String
  message String
  date    DateTime @default(now())
  status  String   @default("Open")
}

model AdminSettings {
  id                   Int     @id @default(1)
  enable2fa            Boolean @default(false)
  notifyOnNewUser      Boolean @default(true)
  notifyOnNewUserLogin Boolean @default(false)
  notifyOnLargeBet     Boolean @default(false)
  notifyOnLargeDeposit Boolean @default(true)
  bettingEnabled       Boolean @default(true)
  maintenanceMode      Boolean @default(false)
}

model Admin {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String
  role              String   @default("admin")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)
  resetToken        String?
  resetTokenExpires DateTime?
  twoFactorSecret   String?
  twoFactorEnabled  Boolean  @default(false)
  backupCodes      String?  // JSON array of backup codes
  loginLogs         AdminLoginLog[]
  sessions          AdminSession[]
  bannedIPs         BannedIP[]
}

model AdminLoginLog {
  id                String    @id @default(cuid())
  adminId           String
  adminEmail        String
  adminName         String
  ipAddress         String?
  userAgent         String?
  deviceType        String?
  browser           String?
  os                String?
  location          Json?
  city              String?
  country           String?
  region            String?
  timezone          String?
  latitude          Decimal?  @db.Decimal(10, 8)
  longitude         Decimal?  @db.Decimal(11, 8)
  loginTime         DateTime  @default(now())
  logoutTime        DateTime?
  sessionDuration   Int?
  loginStatus       String    @default("success")
  failureReason     String?
  isSuccessful      Boolean   @default(true)
  requestHeaders    Json?
  referrer          String?
  screenResolution  String?
  language          String?
  timezoneOffset    Int?
  sessionId         String?
  deviceFingerprint String?
  admin             Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model AdminSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  adminId      String
  expires      DateTime
  admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model BannedIP {
  id          String   @id @default(cuid())
  ipAddress   String   @unique
  reason      String?
  bannedBy    String
  bannedAt    DateTime @default(now())
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  admin       Admin    @relation(fields: [bannedBy], references: [id], onDelete: Cascade)
}

model AdminNotification {
  id        String   @id @default(cuid())
  subject   String
  message   String
  type      String
  metadata  Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
