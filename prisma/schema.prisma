// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(cuid())
  name        String
  email       String         @unique
  password    String
  joined      DateTime       @default(now())
  status      String         @default("Active") // "Active" or "Suspended"
  bets        Bet[]
  transactions Transaction[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Candidate {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  image      String
  hint       String
  color      String
  status     String   @default("Active") // "Active" or "Withdrawn"
  bets       Bet[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Bet {
  id            String    @id @default(cuid())
  amount        Float
  placedDate    DateTime  @default(now())
  status        String    @default("Pending") // "Pending", "Won", or "Lost"
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([candidateId])
}

model Transaction {
  id        String   @id @default(cuid())
  type      String // "Deposit" or "Withdrawal"
  amount    Float
  fee       Float
  date      DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model SupportTicket {
  id          String   @id @default(cuid())
  userName    String
  userEmail   String
  subject     String
  message     String
  date        DateTime @default(now())
  status      String   @default("Open") // "Open" or "Closed"
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}